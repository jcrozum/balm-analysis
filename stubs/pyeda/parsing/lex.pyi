"""
This type stub file was generated by pyright.
"""

"""
Lexical Analysis Utilities

Exceptions:
    Error
    CompileError
    RunError

Interface Classes:
    RegexLexer
"""
class Error(Exception):
    """
    Base class for all lexical analysis errors
    """
    ...


class CompileError(Error):
    """
    Errors raised during compilation of lexical analysis rules.
    """
    ...


class RunError(Error):
    """
    Errors raised during lexical analysis of the source text.
    """
    def __init__(self, msg, lineno, offset, text) -> None:
        ...
    


class RegexLexer:
    """
    Lexer based on regular expressions.
    """
    RULES = ...
    def __init__(self, string) -> None:
        ...
    
    def __iter__(self): # -> Self@RegexLexer:
        ...
    
    def __next__(self): # -> EndToken:
        ...
    
    def push_token(self, tok): # -> None:
        """Push a token into the token queue.

                 +--+--+--+--+
        token => |  |  |  |  |
                 +--+--+--+--+
        """
        ...
    
    def pop_token(self):
        """Pop a token from the token queue.

        +--+--+--+--+
        |  |  |  |  | => token
        +--+--+--+--+
        """
        ...
    
    def unpop_token(self, tok): # -> None:
        """Return a popped token to top of the token queue.

        +--+--+--+--+
        |  |  |  |  | <= token
        +--+--+--+--+
        """
        ...
    
    def peek_token(self): # -> EndToken:
        """Peek at the next token from the token queue."""
        ...
    


def action(toktype): # -> (func: Unknown) -> ((lexer: Unknown, text: Unknown) -> None):
    """Return a parser action property."""
    ...

