"""
This type stub file was generated by pyright.
"""

from pyeda.boolalg import boolfunc
from pyeda.util import cached_property

"""
Boolean Tables

Interface Functions:
    ttvar
    truthtable
    expr2truthtable
    truthtable2expr

Interface Classes:
    TruthTable
        TTConstant
            TTZERO
            TTONE
        TTVariable
"""
_VARS = ...
_PC2STR = ...
def ttvar(name, index=...): # -> TTVariable:
    """Return a TruthTable variable.

    Parameters
    ----------
    name : str
        The variable's identifier string.
    index : int or tuple[int], optional
        One or more integer suffixes for variables that are part of a
        multi-dimensional bit-vector, eg x[1], x[1][2][3]
    """
    ...

def truthtable(inputs, outputs): # -> TTConstant | TTVariable | TruthTable:
    """Return a truth table."""
    ...

def expr2truthtable(expr): # -> TTConstant | TTVariable | TruthTable:
    """Convert an expression into a truth table."""
    ...

def truthtable2expr(tt, conj=...):
    """Convert a truth table into an expression."""
    ...

class PCData:
    """
    Binary-valued positional cube data.

    This class packs PC data items into a Python stdlib array.
    The 2^N indices cover a Boolean space of dimension N.
    """
    def __init__(self, items) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[int, None, None]:
        ...
    
    def __getitem__(self, num):
        ...
    
    @cached_property
    def zero_mask(self): # -> int:
        """Return a mask to determine whether an array chunk has any zeros."""
        ...
    
    @cached_property
    def one_mask(self): # -> int:
        """Return a mask to determine whether an array chunk has any ones."""
        ...
    
    def iter_zeros(self): # -> Generator[int, None, None]:
        """Iterate through the indices of all zero items."""
        ...
    
    def find_one(self): # -> int | None:
        """
        Return the first index of an entry that is either one or DC.
        If no item is found, return None.
        """
        ...
    
    def iter_ones(self): # -> Generator[int, None, None]:
        """Iterate through all items that are either one or DC."""
        ...
    


class TruthTable(boolfunc.Function):
    """Boolean function represented by a truth table."""
    def __init__(self, inputs, pcdata) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __invert__(self): # -> TTConstant | TruthTable:
        ...
    
    def __or__(self, other): # -> TTConstant | Any | TruthTable:
        ...
    
    def __and__(self, other): # -> TTConstant | Any | TruthTable:
        ...
    
    def __xor__(self, other): # -> TTConstant | Any | TruthTable:
        ...
    
    @cached_property
    def support(self): # -> frozenset[Unknown]:
        ...
    
    @property
    def inputs(self): # -> tuple[Unknown, ...]:
        ...
    
    def restrict(self, point): # -> TTConstant | Any | TruthTable | Self@TruthTable:
        ...
    
    def compose(self, mapping): # -> Self@TruthTable | TTConstant | TruthTable:
        ...
    
    def satisfy_one(self): # -> dict[Unknown, int] | None:
        ...
    
    def satisfy_all(self): # -> Generator[dict[Unknown, int], None, None]:
        ...
    
    def is_zero(self): # -> Literal[False]:
        ...
    
    def is_one(self): # -> Literal[False]:
        ...
    
    @staticmethod
    def box(obj): # -> TruthTable | TTConstant:
        ...
    
    def is_neg_unate(self, vs=...): # -> bool:
        r"""Return whether a function is negative unate.

        A function :math:`f(x_1, x_2, ..., x_i, ..., x_n)` is *negative unate*
        in variable :math:`x_i` if :math:`f_{x_i'} \geq f_{xi}`.
        """
        ...
    
    def is_pos_unate(self, vs=...): # -> bool:
        r"""Return whether a function is positive unate.

        A function :math:`f(x_1, x_2, ..., x_i, ..., x_n)` is *positive unate*
        in variable :math:`x_i` if :math:`f_{x_i} \geq f_{x_i'}`.
        """
        ...
    
    def is_binate(self, vs=...): # -> bool:
        """Return whether a function is binate.

        A function :math:`f(x_1, x_2, ..., x_i, ..., x_n)` is *binate* in
        variable :math:`x_i` if it is neither negative nor positive unate in
        :math:`x_i`.
        """
        ...
    


class TTConstant(TruthTable):
    """Truth table constant"""
    def __init__(self, pcval, value) -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __int__(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


TTZERO = ...
TTONE = ...
class TTVariable(boolfunc.Variable, TruthTable):
    """Truth table variable"""
    def __init__(self, bvar) -> None:
        ...
    


